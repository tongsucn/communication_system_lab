//opencv
#include "opencv2/imgcodecs.hpp"
#include "opencv2/imgproc.hpp"
#include "opencv2/video.hpp"
#include <opencv2/highgui.hpp>
#include <opencv2/video.hpp>
//C
#include <stdio.h>
//C++
#include <iostream>
#include <sstream>
using namespace cv;
using namespace std;
// Global variables
Mat frame; //current frame
Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method
Ptr<BackgroundSubtractor> pMOG2; //MOG2 Background subtractor
int keyboard; //input from keyboard
void help();
void processVideo();

typedef struct {
	u_int32_t brightness;
	u_int32_t contrast;
	u_int32_t saturation;
	u_int32_t gain;
	u_int32_t exposure;
	u_int32_t hue;
} vidParams;

vidParams gVidParams;

void freezeParams(VideoCapture cap) {
	gVidParams.brightness = cap.get(CV_CAP_PROP_BRIGHTNESS);
	gVidParams.contrast = cap.get(CV_CAP_PROP_CONTRAST);
	gVidParams.saturation = cap.get(CV_CAP_PROP_SATURATION);
	gVidParams.gain = cap.get(CV_CAP_PROP_GAIN);
	gVidParams.exposure = cap.get(CV_CAP_PROP_EXPOSURE);
	gVidParams.hue = cap.get(CV_CAP_PROP_HUE);
}

void restoreParams(VideoCapture cap) {
	cap.set(CV_CAP_PROP_BRIGHTNESS, gVidParams.brightness);
	cap.set(CV_CAP_PROP_CONTRAST, gVidParams.contrast);
	cap.set(CV_CAP_PROP_SATURATION, gVidParams.saturation);
	cap.set(CV_CAP_PROP_GAIN, gVidParams.gain);
	cap.set(CV_CAP_PROP_EXPOSURE, gVidParams.exposure);
	cap.set(CV_CAP_PROP_HUE, gVidParams.hue);
}

void help()
{
    cout
    << "--------------------------------------------------------------------------" << endl
    << "This program shows how to use background subtraction methods provided by "  << endl
    << " OpenCV. You can process both videos (-vid) and images (-img)."             << endl
                                                                                    << endl
    << "Usage:"                                                                     << endl
    << "./bs {-vid <video filename>|-img <image filename>}"                         << endl
    << "for example: ./bs -vid video.avi"                                           << endl
    << "or: ./bs -img /data/images/1.png"                                           << endl
    << "--------------------------------------------------------------------------" << endl
    << endl;
}
int main(int argc, char* argv[])
{
    //print help information
    help();
    //check for the input parameter correctness
    /*if(argc != 3) {
        cerr <<"Incorret input list" << endl;
        cerr <<"exiting..." << endl;
        return EXIT_FAILURE;
    }*/
    //create GUI windows
    namedWindow("Frame");
    namedWindow("FG Mask MOG 2");
    //create Background Subtractor objects
    pMOG2 = createBackgroundSubtractorMOG2(500, 16, false); //MOG2 approach
    processVideo();
    //destroy GUI windows
    destroyAllWindows();
    return EXIT_SUCCESS;
}
void processVideo() {
    //create the capture object
    VideoCapture capture(1);
    if(!capture.isOpened()){
        //error in opening the video input
        cerr << "Unable to open video stream " << endl;
        exit(EXIT_FAILURE);
    }
    capture.set(CV_CAP_PROP_FRAME_WIDTH,1280);
    capture.set(CV_CAP_PROP_FRAME_HEIGHT,720);
    //freezeParams(capture);
    int frameCount = 0;
    int learningRate = -1;
    //read input data. ESC or 'q' for quitting
    while( (char)keyboard != 'q' && (char)keyboard != 27 ){
        //restoreParams(capture);
        //read the current frame
        if(!capture.read(frame)) {
            cerr << "Unable to read next frame." << endl;
            cerr << "Exiting..." << endl;
            exit(EXIT_FAILURE);
        }
        frameCount++;
        if (frameCount > 100) {
        	learningRate = 0.0001;
        }
        GaussianBlur(frame, frame, cv::Size(7,7), 0);
        pMOG2->apply(frame, fgMaskMOG2, learningRate);
        //get the frame number and write it on the current frame
        stringstream ss;
        rectangle(frame, cv::Point(10, 2), cv::Point(100,20),
                  cv::Scalar(255,255,255), -1);
        ss << frameCount;
        string frameNumberString = ss.str();
        putText(frame, frameNumberString.c_str(), cv::Point(15, 15),
                FONT_HERSHEY_SIMPLEX, 0.5 , cv::Scalar(0,0,0));
        //update the background model
        //show the current frame and the fg masks
        imshow("Frame", frame);

        int dilation_size = 10;
        		Mat element = getStructuringElement( MORPH_ELLIPSE,
           Size( 2*dilation_size + 1, 2*dilation_size+1 ),
		   Point( dilation_size, dilation_size ) );
        	       erode( fgMaskMOG2, fgMaskMOG2, element );
        	       dilate( fgMaskMOG2, fgMaskMOG2, element );

        imshow("FG Mask MOG 2", fgMaskMOG2);
        //get the input from the keyboard
        keyboard = waitKey( 30 );
    }
    //delete capture object
    capture.release();
}
