/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.5-dev at Mon Feb 22 18:40:54 2016. */

#ifndef PB_COFFEE_PB_H_INCLUDED
#define PB_COFFEE_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _CoffeeCommand_CommandType {
    CoffeeCommand_CommandType_OPERATION = 0,
    CoffeeCommand_CommandType_QUERY = 1
} CoffeeCommand_CommandType;

typedef enum _Response_ResponseType {
    Response_ResponseType_OK = 0,
    Response_ResponseType_RESULT = 1,
    Response_ResponseType_OPERATION_ERR = 2,
    Response_ResponseType_FORMAT_ERR = 3
} Response_ResponseType;

/* Struct definitions */
typedef struct _CoffeeCommand {
    bool has_type;
    CoffeeCommand_CommandType type;
    pb_callback_t command;
} CoffeeCommand;

typedef struct _Response_ResultTable {
    bool has_POWER;
    bool POWER;
    bool has_WATER;
    bool WATER;
    bool has_BEANS;
    bool BEANS;
    bool has_TRAY;
    bool TRAY;
} Response_ResultTable;

typedef struct _Response {
    bool has_type;
    Response_ResponseType type;
    pb_callback_t description;
    bool has_results;
    Response_ResultTable results;
} Response;

/* Default values for struct fields */

/* Initializer values for message structs */
#define CoffeeCommand_init_default               {false, (CoffeeCommand_CommandType)0, {{NULL}, NULL}}
#define Response_init_default                    {false, (Response_ResponseType)0, {{NULL}, NULL}, false, Response_ResultTable_init_default}
#define Response_ResultTable_init_default        {false, 0, false, 0, false, 0, false, 0}
#define CoffeeCommand_init_zero                  {false, (CoffeeCommand_CommandType)0, {{NULL}, NULL}}
#define Response_init_zero                       {false, (Response_ResponseType)0, {{NULL}, NULL}, false, Response_ResultTable_init_zero}
#define Response_ResultTable_init_zero           {false, 0, false, 0, false, 0, false, 0}

/* Field tags (for use in manual encoding/decoding) */
#define CoffeeCommand_type_tag                   1
#define CoffeeCommand_command_tag                2
#define Response_ResultTable_POWER_tag           1
#define Response_ResultTable_WATER_tag           2
#define Response_ResultTable_BEANS_tag           3
#define Response_ResultTable_TRAY_tag            4
#define Response_type_tag                        1
#define Response_description_tag                 2
#define Response_results_tag                     3

/* Struct field encoding specification for nanopb */
extern const pb_field_t CoffeeCommand_fields[3];
extern const pb_field_t Response_fields[4];
extern const pb_field_t Response_ResultTable_fields[5];

/* Maximum encoded size of messages (where known) */
#define Response_ResultTable_size                8

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define COFFEE_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
